---
layout: post
title:  "제주코딩캠프_복습 (1.기본문법)"
date:   2019-02-20 10:49:59
author: 안상우
categories: Devlog
cover:  "/assets/pyhon.jpg"
---


# Pythonic - readable, share, easy to follow


```python
h = {1, 2, 3, 4, 5} # => set
dir(h) # __underbar__ 는 속성에 대한 정리
       # 언더바 없는것은 자주 쓰는 기능 정리 
    

```




    ['__and__',
     '__class__',
     '__contains__',
     '__delattr__',
     '__dir__',
     '__doc__',
     '__eq__',
     '__format__',
     '__ge__',
     '__getattribute__',
     '__gt__',
     '__hash__',
     '__iand__',
     '__init__',
     '__init_subclass__',
     '__ior__',
     '__isub__',
     '__iter__',
     '__ixor__',
     '__le__',
     '__len__',
     '__lt__',
     '__ne__',
     '__new__',
     '__or__',
     '__rand__',
     '__reduce__',
     '__reduce_ex__',
     '__repr__',
     '__ror__',
     '__rsub__',
     '__rxor__',
     '__setattr__',
     '__sizeof__',
     '__str__',
     '__sub__',
     '__subclasshook__',
     '__xor__',
     'add',
     'clear',
     'copy',
     'difference',
     'difference_update',
     'discard',
     'intersection',
     'intersection_update',
     'isdisjoint',
     'issubset',
     'issuperset',
     'pop',
     'remove',
     'symmetric_difference',
     'symmetric_difference_update',
     'union',
     'update']




```python
a = "hello world"
b = a.split() # 디폴트는 공백기준
b
```




    ['hello', 'world']




```python
' '.join(b) #리스트들을 "기준" 으로 합친다. 
```




    'hello world'




```python
# range(start, stop, step)
range(1,10,2)
```


```python
for i in range(1, 10, 2):
    print(i)
    
```

    1
    3
    5
    7
    9


##### format 


```python
name = '제주도'
age = '23'
print('제 이름은 {0}입니다. 제 나이는 {1}입니다.'.format(name,age))

# OR

print('제 이름은 ',name,'입니다.')
```

    제 이름은 제주도입니다. 제 나이는 23입니다.
    제 이름은  제주도 입니다.



```python
while True:
    x=input('##')
    if x == 'exit':
        break
        
# shell program 터미널이나 유닉스 프로그램의 기본원리라고 생각하면 된다. 

```

    ##hi
    ##hi
    ##exit


#### 구글 예시문제

1부터 10,000까지 8이라는 숫자가 총 몇번 나오는가?

8이 포함되어 있는 숫자의 갯수를 카운팅 하는 것이 아니라 8이라는 숫자를 모두 카운팅 해야 한다.
(※ 예를들어 8808은 3, 8888은 4로 카운팅 해야 함)


```python
str(list(range(10000))).count('8')
```




    4000




```python
a = 10 
b = 3
```


```python
print(a/b)  # 그냥 할 수 있는데 까지 계산 결과를 보여줌.
print(a//b) # 몫만 
print(a%b)  # 나머지만
```

    3.3333333333333335
    3
    1


## if, elif, else


```python
score = 91 
money = 0
if score > 90 :
    print('mom : i\'m so happy') # escape 여러 가지가 있다. 다른 언어에서도 공통으로 쓴다.
    money += 1000000 # 누적을 의미한다.
if score > 80 :
    print('mom : i\'m so happy')
    money += 100000 
if score > 70 :
    print('mom : i\'m so happy') 
    money += 10000 # 누적을 의미한다.
    
print(money)
# 결과를 보면 전부 다 거치게 된다 . 한 세트롤 사용하고 싶을 떄 이를 해결하려면? 
```

    mom : i'm so happy
    mom : i'm so happy
    mom : i'm so happy
    1110000



```python
score = 91 
money = 0
if score > 90 :
    print('mom : i\'m so happy') # escape 여러 가지가 있다. 다른 언어에서도 공통으로 쓴다.
    money += 1000000 # 누적을 의미한다.
elif score > 80 : # 그렇지 않고 만약에?? &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&집합 개념 거르는 걸로 생각
    print('mom : i\'m so happy')
    money += 100000 
elif score > 70 : # 그렇지 않고 만약에??
    print('mom : i\'m so happy') 
    money += 10000 # 누적을 의미한다.

else:
    money+=1000
    
print(money)
    
```

    mom : i'm so happy
    1000000


## list tuple dictionary set

#### reversed VS reverse


```python
_list = list(range(4))

print (_list)

#Using reversed # 원본은 변경하지 않는다# 파이썬 내장함수
rlist = list(reversed(_list))
print (rlist)

#Using reverse  # 원본 변경한다. 리스트 자료형의 메소드. 
_list.reverse()
print (_list)
```

    [0, 1, 2, 3]
    [3, 2, 1, 0]
    [3, 2, 1, 0]


### tuple


```python
l = (100,200,300,400)
'''
1. 튜플 안에는 다른 object들이 들어갈 수 있습니다.
2. 값을 변화시킬 수 없습니다.
3. 순서가 있습니다.
append 불가능합니다.
메소드의 일부분을 리스트와 공유합니다 . ex) count 
'''
```




    '\n1. 튜플 안에는 다른 object들이 들어갈 수 있습니다.\n2. 값을 변화시킬 수 없습니다.\n3. 순서가 있습니다.\nappend 불가능합니다.\n메소드의 일부분을 리스트와 공유합니다 . ex) count \n'



### dictionary


```python
d= {'one': 1, 'two': 2}

'''
1. 딕셔너리 안에는 다른 object들이 들어갈 수 있습니다.
2. 값을 변화시킬 수 있습니다.
3. 순서가 없습니다.
# 제일 유사한 게 json

'''

#(key:value, key:value)
#json => list 안에 딕셔너리

print(d['one'])
print(type(d))
print(dir(d))
print(d.values()) ########자주 쓰는 거 3개
print(d.keys())
print(d.items())
d['three'] = 3 # 키 밸류 값 추가
d
```

    1
    <class 'dict'>
    ['__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
    dict_values([1, 2])
    dict_keys(['one', 'two'])
    dict_items([('one', 1), ('two', 2)])





    {'one': 1, 'two': 2, 'three': 3}



### set


```python
s= {1,2,3,4,4,4,4}
'''
1. 집합은 중복을 허락하지 않는다. 
2. 순서가 없습니다. 

set 자료형으로 바꾸면 중복값을 없애줄수 있다. 
'''
```




    '\n1. 집합은 중복을 허락하지 않는다. \n2. 순서가 없습니다. \n\nset 자료형으로 바꾸면 중복값을 없애줄수 있다. \n'



# 파일 입출력 


```python
f = open("인공지능캠프.txt",'w')
for i in range(1,6):
    data = '%d명, 참여,중입니다.'%i  # 이러면 엑셀로도 열 수 있다. csv 니까.
    f.write(data)
f.close()
```


```python
f = open("인공지능캠프.txt",'r')
lines = f.readlines()
for line in lines:
    print(line)
f.close()
```

    1명, 참여,중입니다.2명, 참여,중입니다.3명, 참여,중입니다.4명, 참여,중입니다.5명, 참여,중입니다.



```python
with open("test.txt","w") as f :
    f.write("Life is too short, you need python")
```

# 자잘한 Tip들


```python
randoms = ['june', 33, 0.1, 20]

randoms[0][1]
```




    'u'




```python
locker = {'june': 3300, 'ami': 1234, 'bob': 5313}
locker['june']

locker['ami']= 4321 # 값을 변경해 줄 수 있다.
```


```python
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9] #, 하고 띄우는 습관은 좋은 습관인 것 같다. 

for n in nums: ######################################################### 퍼센트와 // 두 개 차이 잘 알아놓기 
    if n % 2 == 0:
        print(n)
''' 아래 위가 같다. '''        
        
new_list = [n for n in range(10) if n%2 == 0]
```

    2
    4
    6
    8


## 밑 부분은 아직 이해가 안갑니다,


```python
[n for n in range(10)] # list comprehension # 리스트 컴프리헨션
```




    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]




```python
new_list = []
for n in range(10):
    new_list.append(n)
new_list # 위와 같다.
```




    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]




```python
nums = [1, 2, 3, 4, 5, 6, 7, 8, 9] #, 하고 띄우는 습관은 좋은 습관인 것 같다. 

for n in nums: # 퍼센트와 // 두 개 차이 잘 알아놓기 
    if n % 2 == 0:
        print(n)
#''' 아래 위가 같다. '''        pychad
        
new_list = [n for n in range(10) if n%2 == 0]
```

    2
    4
    6
    8



```python

```
